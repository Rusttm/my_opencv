import logging
import os

import aiofiles
import aiogram.exceptions
from aiogram import types, Router, F, Bot, html
from aiogram.filters import CommandStart, Command, or_f, StateFilter
from aiogram.filters.callback_data import CallbackQueryFilter
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import BufferedInputFile
from aiogram.utils.markdown import hbold
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select

from aiogram.utils.formatting import as_list, as_marked_section, Bold

from AiogramPackage.TGFilters.BOTFilter import BOTFilterChatType
# from AiogramPackage.TGKeyboards import TGKeybReplyMarkup as my_reply_kb
from AiogramPackage.TGKeyboards.TGKeybReplyBuilder import reply_kb_lvl1, reply_kb_lvl2, del_kb
from AiogramPackage.TGKeyboards.TGKeybReplyList import make_row_keyboard
from AiogramPackage.TGKeyboards.TGKeybInline import get_callback_btns, get_url_btns, get_mixed_btns
from AiogramPackage.TGAlchemy.TGModelProd import TGModelProd
from AiogramPackage.TGAlchemy.TGModelStock import get_stock_row

_static_dir = "data_static"
_instrument_img = "instrument_img.jpg"
_spares_img = "spares_img.jpg"

user_router = Router()
user_router.message.filter(BOTFilterChatType(["private"]))


@user_router.message(CommandStart())
@user_router.message(or_f(Command("menu", "men", ignore_case=True), (F.text.lower().contains("–º–µ–Ω—é"))))
@user_router.message(F.text.lower() == "start")
async def start_cmd(message: types.Message):
    # version1
    # await message.answer(f"{message.from_user.first_name}, welcome to bot!", reply_markup=my_reply_kb.my_reply_kb)
    # version2
    await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {hbold(message.from_user.first_name)}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à ü•∏–±–æ—Ç",
                         reply_markup=reply_kb_lvl1.as_markup(
                             resize_keyboard=True,
                             input_field_placeholder="–ß—Ç–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç"
                         ))
    # version 3
    # await message.answer(f"{message.from_user.first_name}, welcome to bot!",
    #                      reply_markup=my_bld_kb.get_my_kb(
    #                          "–ú–µ–Ω—é",
    #                          "–û –±–æ—Ç–µ",
    #                          "–†–µ–∫–≤–∏–∑–∏—Ç—ã –ö–æ–º–ø–∞–Ω–∏–∏",
    #                          "–ü–ª–∞—Ç–µ–∂–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã",
    #                          placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é",
    #                          sizes=(2, 2)
    #                      )
    #                      )


@user_router.message(Command("hide_menu", ignore_case=True))
async def menu_cmd(message: types.Message):
    # ver1
    await message.answer(f"{message.from_user.first_name}, can't hide main menu!", reply_markup=del_kb)


@user_router.message(or_f(Command("menu", "men", ignore_case=True), (F.text.lower().contains("–º–µ–Ω—é"))))
async def menu_cmd(message: types.Message):
    # ver1
    # await message.answer(f"{message.from_user.first_name}, welcome to main menu!", reply_markup=my_reply_kb.del_kb)
    await message.answer(f"{html.quote(message.from_user.first_name)}, welcome to main menu!", reply_markup=reply_kb_lvl1)


@user_router.message(Command("catalogue", ignore_case=True))
@user_router.message((F.text.lower().contains("–∫–∞—Ç–∞–ª–æ–≥")) | (F.text.lower().contains("catalogue")))
async def menu_cmd(message: types.Message):
    await message.answer(f"{hbold(message.from_user.first_name)}, welcome to <b>Catalogue</b>",
                         reply_markup=reply_kb_lvl2.as_markup(
                             resize_keyboard=True,
                             input_field_placeholder="–ß—Ç–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"
                         ))


@user_router.message(F.text.lower().contains("—Ä–µ–∫–≤–∏–∑–∏—Ç—ã"))
async def company_info_cmd(message: types.Message):
    msg = str('<b>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:</b> –ê–∫—Ü–∏–æ–Ω–µ—Ä–Ω–æ–µ –æ–±—â–µ—Å—Ç–≤–æ ¬´–°–µ—Ä–º–∞–Ω¬ª\n'
              '<b>–ê–¥—Ä–µ—Å:</b> 125504, –≥. –ú–æ—Å–∫–≤–∞, –î–º–∏—Ç—Ä–æ–≤—Å–∫–æ–µ —à–æ—Å—Å–µ, –¥. 71–ë, —ç—Ç–∞–∂ 5, –∫–æ–º–Ω–∞—Ç–∞ 7)\n'
              '<b>–ò–ù–ù / –ö–ü–ü:</b> 7743275417 / 774301001\n'
              '<b>–û–ì–†–ù/–û–ö–ü–û:</b> 1187746831007/33241658\n'
              '<b>–ë–ò–ö –ë–∞–Ω–∫–∞:</b> 044525593\n'
              '<b>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞:</b> –ê–û "–ê–õ–¨–§–ê-–ë–ê–ù–ö"\n'
              '<b>–ö–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç—Å–∫–∏–π —Å—á–µ—Ç:</b> 30101810200000000593\n'
              '<b>–†–∞—Å—á–µ—Ç–Ω—ã–π —Å—á–µ—Ç:</b> 40702810801300031452\n'
              '<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> +8 495 909 8033')
    await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {hbold(html.quote(message.from_user.first_name))}, —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –Ω–∞—à–µ–π –ö–æ–ø–∞–Ω–∏–∏:\n{msg}")


class FindInstrument(StatesGroup):
    brand = State()
    model = State()


class FindSpare(StatesGroup):
    brand = State()
    code = State()


available_instrument_brands = []
available_instrument_models = ["812", "CN70"]
add_btn = ["–û—Ç–º–µ–Ω–∞"]


@user_router.message(StateFilter('*'), Command("cancel", ignore_case=True))
@user_router.message(StateFilter('*'), F.text.casefold() == "–æ—Ç–º–µ–Ω–∞")
async def cancel_find_instrument(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.clear()
    await message.answer(f"–í–≤–æ–¥ ‚ùå<b>–û—Ç–º–µ–Ω–µ–Ω</b>", reply_markup=
    reply_kb_lvl2.as_markup(resize_keyboard=True, input_field_placeholder="–ß—Ç–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"))


@user_router.message(StateFilter(None), F.text == "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç")
async def find_brand_instrument(message: types.Message, state: FSMContext, bot: Bot):
    available_instrument_brands = bot.filters_dict.get("instrument_brands_list", ["MEITE", "BLOCK"])
    kb_lines = [add_btn, available_instrument_brands]
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ <b>–ú–∞—Ä–∫—É</b> üî®–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (–∏–ª–∏ '.')", reply_markup=make_row_keyboard(kb_lines))
    await state.set_state(FindInstrument.brand)


# @user_router.message(FindInstrument.brand, F.text.in_(available_instrument_brands))
@user_router.message(FindInstrument.brand)
async def find_model_instrument(message: types.Message, state: FSMContext, bot: Bot):
    """ after press brand """
    available_instrument_models = bot.filters_dict.get("instrument_models_list", ["8016", "851", "CN"])
    kb_lines = [add_btn, available_instrument_models]
    await state.update_data(brand=message.text)
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ <b>–ú–æ–¥–µ–ª—å</b> üî®–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (–∏–ª–∏ '.')", reply_markup=make_row_keyboard(kb_lines))
    await state.set_state(FindInstrument.model)


@user_router.message(FindInstrument.model)
async def find_instrument(message: types.Message, state: FSMContext, session: AsyncSession, bot: Bot):
    """ after press model"""
    await state.update_data(model=message.text)
    await message.answer(f"<b>–ü–æ–∏—Å–∫</b> üî®–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞", reply_markup=reply_kb_lvl2.as_markup(
        resize_keyboard=True,
        input_field_placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–∞–Ω–¥—É"
    ))
    try:
        data = await state.get_data()
        brand = data.get("brand")
        model = data.get("model")
        statement = select(TGModelProd).filter(TGModelProd.pathName.contains("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"))
        if brand != ".":
            statement = statement.filter(TGModelProd.pathName.contains(brand))
        if model != ".":
            statement = statement.filter(TGModelProd.name.contains(model))
        result = await session.execute(statement)
        obj_list = result.scalars().all()
        if obj_list:
            for prod_obj in obj_list:
                url = "https://sermangroup.ru"
                photo = None
                try:
                    prod_attrs = prod_obj.attributes
                    for attr in prod_attrs:
                        attr_name = attr.get("name")
                        if attr_name == "–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä –Ω–∞ —Å–∞–π—Ç–µ –º–∞–≥–∞–∑–∏–Ω–∞":
                            url = attr.get("value")
                        elif attr_name == "–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞":
                            photo = attr.get("value")
                except Exception as e:

                    logging.warning(f"cannot get attributes from prod, error {e}")
                stock_sum = "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
                try:
                    prod_id = prod_obj.id
                    # print(f"{prod_id=}")
                    stock = await get_stock_row(prod_id)
                    stock_sum = stock.stock
                except Exception as e:
                    logging.warning(f"cannot get stock sum from stock, error {e}")
                up_cur_file_path = os.path.dirname(os.path.dirname(__file__))
                static_file = os.path.join(up_cur_file_path, _static_dir, _instrument_img)
                async with aiofiles.open(static_file, "rb") as plot_img:
                    # print(f"{len(prod_obj.id)=} and {len(prod_obj.meta.get('href'))=}")
                    if not photo:
                        photo = BufferedInputFile(file=await plot_img.read(), filename="–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç")
                    # try to send photo
                    try:
                        await bot.send_photo(chat_id=message.chat.id,
                                             photo=photo,
                                             caption=f"üî®–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {prod_obj.name}\n"
                                                     f"ü´ô–ù–∞ —Å–∫–ª–∞–¥–µ: {stock_sum}",
                                             reply_markup=get_mixed_btns(btns={
                                                 "–ü–µ—Ä–µ–π—Ç–∏": url,
                                                 "–ü–æ–¥—Ä–æ–±–Ω–µ–µ": f"get_prod_info_{prod_obj.id}"
                                             }))
                    except aiogram.exceptions.TelegramBadRequest:
                        # sometime photo href doesnt work
                        # await message.answer(f"–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ñ–æ—Ç–æ {url} –¥–ª—è üî®–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ {str(data)}!")
                        try:
                            photo = BufferedInputFile(file=await plot_img.read(), filename="–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç")
                            await bot.send_photo(chat_id=message.chat.id,
                                                 photo=photo,
                                                 caption=f"üî®–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {prod_obj.name}\n"
                                                         f"ü´ô–ù–∞ —Å–∫–ª–∞–¥–µ: {stock_sum}",
                                                 reply_markup=get_mixed_btns(btns={
                                                     "–ü–µ—Ä–µ–π—Ç–∏": url,
                                                     "–ü–æ–¥—Ä–æ–±–Ω–µ–µ": f"get_prod_info_{prod_obj.id}"
                                                 }))
                        except Exception as e:
                            msg = f"Cant find correct photo for spare part, error {e}"
                            print(msg)
        else:
            await message.answer(f"üî®–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {str(data)} –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω!")
    except Exception as e:
        logging.warning(f"cannot get attributes from prod, error {e}")
    await state.clear()


"""  –ó–∞–ø—á–∞—Å—Ç–∏ """


@user_router.message(StateFilter(None), F.text.lower() == "–∑–∞–ø—á–∞—Å—Ç–∏")
async def find_brand_spare(message: types.Message, state: FSMContext, bot: Bot):
    available_spares_brands = bot.filters_dict.get("spares_brands_list", ["Meite", "Block"])
    kb_lines = [add_btn, available_spares_brands]
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ <b>–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è</b> –¥–ª—è –ø–æ–∏—Å–∫–∞ üî©–∑–∞–ø—á–∞—Å—Ç–∏ (–∏–ª–∏ '.')",
                         reply_markup=make_row_keyboard(kb_lines))
    await state.set_state(FindSpare.brand)


@user_router.message(FindSpare.brand)
async def find_model_spare(message: types.Message, state: FSMContext, bot: Bot):
    available_spares_codes = bot.filters_dict.get("spare_codes_list", ["8016", "851", "CN"])
    kb_lines = [add_btn, available_spares_codes]
    await state.update_data(brand=message.text)
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ <b>–∫–æ–¥</b> üî©–∑–∞–ø—á–∞—Å—Ç–∏",
                         reply_markup=make_row_keyboard(kb_lines),
                         input_field_placeholder="Enter a code")
    await state.set_state(FindSpare.code)


@user_router.message(FindSpare.code)
async def find_spare(message: types.Message, state: FSMContext, session: AsyncSession, bot: Bot):
    await state.update_data(code=message.text)
    await message.answer(f"<b>–ü–æ–∏—Å–∫</b> üî®–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞", reply_markup=reply_kb_lvl2.as_markup(
        resize_keyboard=True,
        input_field_placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å"
    ))
    try:
        data = await state.get_data()
        brand = data.get("brand")
        code = data.get("code")
        statement0 = select(TGModelProd).filter(TGModelProd.pathName.contains("–ó–∞–ø–∞—Å–Ω—ã–µ"))
        if brand == ".":
            statement = statement0.filter(TGModelProd.name.contains(code))
        else:
            statement = statement0.filter(TGModelProd.pathName.contains(brand)).filter(TGModelProd.name.contains(code))
        result = await session.execute(statement)
        obj_list = result.scalars().all()
        if obj_list:
            for prod_obj in obj_list:
                url = "https://sermangroup.ru"
                photo = None
                try:
                    prod_attrs = prod_obj.attributes
                    for attr in prod_attrs:
                        attr_name = attr.get("name")
                        if attr_name == "–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä –Ω–∞ —Å–∞–π—Ç–µ –º–∞–≥–∞–∑–∏–Ω–∞":
                            url = attr.get("value")
                        elif attr_name == "–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞":
                            photo = attr.get("value")
                except Exception as e:
                    logging.warning(f"cannot get attributes from prod, error {e}")
                try:
                    prod_id = prod_obj.id
                    print(f"{prod_id=}")
                    stock = await get_stock_row(prod_id)
                    stock_sum = stock.stock
                except Exception as e:
                    logging.warning(f"cannot get stock sum from stock, error {e}")
                up_cur_file_path = os.path.dirname(os.path.dirname(__file__))
                static_file = os.path.join(up_cur_file_path, _static_dir, _spares_img)
                async with aiofiles.open(static_file, "rb") as plot_img:
                    # print(f"{len(prod_obj.id)=} and {len(prod_obj.meta.get('href'))=}")
                    if not photo:
                        photo = BufferedInputFile(file=await plot_img.read(), filename="–ó–∞–ø—á–∞—Å—Ç—å")
                    try:
                        await bot.send_photo(chat_id=message.chat.id,
                                             photo=photo,
                                             caption=f"üî©–ó–∞–ø—á–∞—Å—Ç–∏ {prod_obj.name}\n"
                                                     f"ü´ô–ù–∞ —Å–∫–ª–∞–¥–µ: {stock_sum}",
                                             reply_markup=get_mixed_btns(btns={
                                                 "–ü–µ—Ä–µ–π—Ç–∏": url,
                                                 "–ü–æ–¥—Ä–æ–±–Ω–µ–µ": f"get_prod_info_{prod_obj.id}"
                                             }))
                    except aiogram.exceptions.TelegramBadRequest:
                        try:
                            photo = BufferedInputFile(file=await plot_img.read(), filename="–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç")
                            await bot.send_photo(chat_id=message.chat.id,
                                                 photo=photo,
                                                 caption=f"üî®–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {prod_obj.name}\n"
                                                         f"ü´ô–ù–∞ —Å–∫–ª–∞–¥–µ: {stock_sum}",
                                                 reply_markup=get_mixed_btns(btns={
                                                     "–ü–µ—Ä–µ–π—Ç–∏": url,
                                                     "–ü–æ–¥—Ä–æ–±–Ω–µ–µ": f"get_prod_info_{prod_obj.id}"
                                                 }))
                        except Exception as e:
                            print(e)

        else:
            await message.answer(f"üî©–ó–∞–ø—á–∞—Å—Ç–µ–π: {str(data)} –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!")
    except Exception as e:
        logging.warning(f"cannot establish connection, error {e}")
        await message.answer(f"–í–∞—à –∑–∞–ø—Ä–æ—Å üî©–∑–∞–ø—á–∞—Å—Ç–µ–π: –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω:\n –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –µ—â–µ —Ä–∞–∑")
    await state.clear()

# @user_router.message(FindInstrument.model, F.text.lower() != "–æ—Ç–º–µ–Ω–∞")
# async def wrong_model_instrument(message: types.Message):
#     kb_lines = [add_btn, available_instrument_models]
#     await message.answer(f"–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è –º–æ–¥–µ–ª—å! –í–≤–µ–¥–∏—Ç–µ <b>–ú–æ–¥–µ–ª—å</b> –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞",
#                          reply_markup=make_row_keyboard(kb_lines))


# @user_router.message(StateFilter('*'), Command("back", ignore_case=True))
# @user_router.message(StateFilter('*'), F.text.casefold() == "–Ω–∞–∑–∞–¥")
# async def cancel_find_instrument(message: types.Message, state: FSMContext):
#     current_state = await state.get_state()
#     if current_state == FindInstrument.brand:
#         await message.answer(f"–ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞ –Ω–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –û—Ç–º–µ–Ω–∞")
#         return
#     prev = None
#     for step in FindInstrument.__all_states__:
#         if step.state == current_state:
#             await state.set_state(prev)
#             await message.answer(f"<b>–í–æ–∑–≤—Ä–∞—Ç</b> –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É")
#             return
#         prev = step
