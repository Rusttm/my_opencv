""" –º–æ–¥–µ—Ä–∞—Ü–∏—è –≥—Ä—É–ø–ø—ã –≤ –∫–æ—Ç–æ—Ä–æ–π –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º"""

import logging
import os
import datetime

import aiofiles
from aiogram import types, Router, F, Bot, flags
from aiogram.filters import CommandStart, Command, or_f, IS_ADMIN
# from aiogram.filters.chat_member_updated import IS_ADMIN, ChatMemberUpdatedFilter, IS_MEMBER
from string import punctuation

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import BufferedInputFile
from aiogram.utils.callback_answer import CallbackAnswerMiddleware, CallbackAnswer
from aiogram.utils.markdown import hbold

from AiogramPackage.TGFilters.BOTFilter import BOTFilterChatType, BOTFilterFinList, BOTFilterIsGroupAdmin
from AiogramPackage.TGKeyboards.TGKeybReplyBuilder import reply_kb_lvl1_admin, del_kb
from AiogramPackage.TGKeyboards.TGKeybInline import get_callback_btns
from AiogramPackage.TGConnectors.TGMSConnector import TGMSConnector
from AiogramPackage.TGMiddleWares.TGMWCallbackData import TGMWCallbackData

_static_dir = "data_static"
_reports_img = "plot_img.jpg"
_await_sticker = "CAACAgIAAxkBAAELd3Vl1n8pL3dHXcijRQ6OSUXB4Iu7EwACGwMAAs-71A7CHN2zMqnsdTQE"

fin_group_router = Router()
fin_group_router.message.filter(BOTFilterChatType(["private"]), BOTFilterFinList())


def clean_text(text: str):
    """ –≤—ã—Ä–µ–∑–∞–µ—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∑–Ω–∞–∫–∏"""
    return text.translate(str.maketrans("", "", punctuation))


class PrepaReport(StatesGroup):
    requested = State()


@fin_group_router.message(CommandStart())
@fin_group_router.message(F.text.lower() == "start")
async def admin_menu_cmd(message: types.Message):
    await message.answer(
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ üßÆ—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–ª–æ–∫ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞",
        reply_markup=reply_kb_lvl1_admin.as_markup(
            resize_keyboard=True,
            input_field_placeholder="–ß—Ç–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"
        ))


@fin_group_router.message(Command("report", "rep", ignore_case=True))
@fin_group_router.message(F.text.lower().contains("–æ—Ç—á–µ—Ç"))
async def menu_cmd(message: types.Message, bot: Bot):

    up_cur_file_path = os.path.dirname(os.path.dirname(__file__))
    static_file = os.path.join(up_cur_file_path, _static_dir, _reports_img)
    async with aiofiles.open(static_file, "rb") as plot_img:
        await bot.send_photo(chat_id=message.chat.id,
                             photo=BufferedInputFile(file=await plot_img.read(), filename="–ì—Ä–∞—Ñ–∏–∫"),
                             caption=f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {hbold(message.from_user.first_name)}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ üìâ<b>–æ—Ç—á–µ—Ç—ã</b>!",
                             reply_markup=get_callback_btns(btns={
                                 "üí∏–ü—Ä–∏–±—ã–ª–∏/–£–±—ã—Ç–∫–∏": f"rep_fin_profit_daily_{message.chat.id}",
                                 "‚öñÔ∏è–ë–∞–ª–∞–Ω—Å": f"rep_fin_balance_{message.chat.id}",
                                 "üö¨–î–æ–ª–≥–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤": f"rep_fin_debt_{message.chat.id}",
                                 "üõ†Ô∏è–û—Ç–≥—Ä—É–∑–∫–∏ <30%": f"rep_fin_margin_{message.chat.id}",
                                 "üí∞–û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å—á–µ—Ç–∞—Ö": f"rep_fin_account_{message.chat.id}",
                                 "üìÜ–ò—Ç–æ–≥–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è": f"rep_fin_daily_{message.chat.id}"
                             }),
                             request_timeout=100)

    logging.info("requested reports")


@fin_group_router.message(or_f(Command("menu", "men", ignore_case=True), (F.text.lower().contains("–º–µ–Ω—é"))))
async def menu_cmd(message: types.Message):
    # ver1
    # await message.answer(f"{message.from_user.first_name}, welcome to main menu!", reply_markup=my_reply_kb.del_kb)
    await message.answer(f"{message.from_user.first_name}, welcome to admin main menu!",
                         reply_markup=reply_kb_lvl1_admin.as_markup(
                             resize_keyboard=True,
                             input_field_placeholder="–ß—Ç–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"))


@fin_group_router.message(F.text.lower().startswith("–∏—Ç–æ–≥"))
async def send_summary_rep_daily(message: types.Message, state: FSMContext, bot: Bot):
    """ send summary daily report"""
    temp_msg = await message.answer("–ó–∞–ø—Ä–æ—à–µ–Ω –±–æ–ª—å—à–æ–π –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç, —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è, –ø–æ–¥–æ–∂–¥–∏—Ç–µ ...‚è±Ô∏è")
    # from https://zelenka.guru/threads/3538801/
    temp_sticker = await message.reply_sticker(sticker=_await_sticker)
    today = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    res_msg = str(f"–û—Ç—á–µ—Ç –Ω–∞ {today}\n")
    try:
        res_msg += await TGMSConnector().get_summary_rep_str_async()
    except Exception as e:
        msg = f"Can't form summary daily report, Error:\n {e}"
        logging.warning(msg)
        await message.answer(msg)
    else:
        await bot.delete_messages(chat_id=message.chat.id, message_ids=[temp_msg.message_id, temp_sticker.message_id])
        await message.answer(res_msg)
